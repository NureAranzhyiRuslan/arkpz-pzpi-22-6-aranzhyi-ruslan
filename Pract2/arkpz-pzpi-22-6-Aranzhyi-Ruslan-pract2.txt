МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ

ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ
УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ



Практична робота №2


з дисципліни
«Аналіз та рефакторінг коду»






Харків 2024

1.1 Тема
Методи рефакторингу коду програмного забезпечення.

1.2 Мета роботи
Ознайомитися з різними методами рефакторингу програмного коду та продемонструвати їх використання на реальних прикладах.

1.3 Хід роботи

1) Replace nested conditionals with guard clauses.
Метод відокремлює перевірки які призводять до виходу з функції, на початку блоку. Це дозволяє швидше зрозуміти логіку функції, оскільки основний функціонал не захований у вкладеннях.
Проведемо рефакторінг наступного коду: усі перевірки, які однозначно визначають, що функція повинна завершитися, винесимо в початок функції, замінимо вкладені блоки if на перевірки, які викликають return.

Приклад до рефакторингу:
bool utl_Vector_equals(utl_Vector* a, utl_Vector* b) {
    if (a != b) {
        if (a->size == b->size) {
            if (a->message_def != NULL && b->message_def != NULL) {
                if (a->message_def == NULL || a->message_def->type == b->message_def->type) {
                    if (a->message_def == NULL || a->message_def->type != TLOBJECT || a->message_def->sub.type_def == b->message_def->sub.type_def) {
                        for (size_t i = 0; i < a->size; i++) {
                            void* value_a = a->items[i];
                            void* value_b = a->items[i];
                            switch (a->message_def->type) {
                                // Type-based checks
                            }
                        }
                    } else {
                        return false;
                    }
                } else {
                    return false;
                }
            } else {
                return false;
            }
        } else {
            return false;
        }
    } else {
        return true;
    }
    
    return true;
}

Приклад після рефакторингу:
bool utl_Vector_equals(utl_Vector* a, utl_Vector* b) {
    if(a == b) {
        return true;
    }
    if(a->size != b->size) {
        return false;
    }
    if(a->message_def == NULL || b->message_def == NULL) {
        return false;
    }
    if(a->message_def != NULL && a->message_def->type != b->message_def->type) {
        return false;
    }
    if(a->message_def != NULL && a->message_def->type == TLOBJECT && a->message_def->sub.type_def != b->message_def->sub.type_def) {
        return false;
    }

    for(size_t i = 0; i < a->size; i++) {
        void* value_a = a->items[i];
        void* value_b = a->items[i];
        switch (a->message_def->type) {
            // Type-based checks
        }
    }

    return true;
}

2) Replace Magic Number with Symbolic Constant.
Метод замінює магічні числа (числові літерали, які використовуються без пояснень у коді) на символічні константи, що робить код більш зрозумілим і легшим для підтримки.
Проведемо рефакторинг програмного коду: знайдемо всі числа, які використовуються в коді без явного пояснення, наприклад 1, 4, 64, визначимо що кожне число означає та створимо константи з зрозумілими іменами, які пояснюють значення цих чисел.

Приклад до рефакторингу:
@interactions.post("/<int:interaction>/<string:token>/callback", body_cls=InteractionRespond)
async def respond_to_interaction(data: InteractionRespond, interaction: Interaction = DepInteraction):
    d = data.data
    if interaction.status != 1:
        raise InteractionAlreadyAck
    if data.type == 4:
        if not d.content:
            raise CannotSendEmptyMessage
        await send_interaction_response(interaction, d.flags & 64, d.content)
    elif data.type == 5:
        flags = (d.flags & 64) if d is not None else 0
        await send_interaction_response(interaction, flags | 128, "")

    return "", 204

Приклад після рефакторингу:
@interactions.post("/<int:interaction>/<string:token>/callback", body_cls=InteractionRespond)
async def respond_to_interaction(data: InteractionRespond, interaction: Interaction = DepInteraction):
    T = InteractionCallbackType
    d = data.data
    if interaction.status != InteractionStatus.PENDING:
        raise InteractionAlreadyAck
    if data.type == T.CHANNEL_MESSAGE_WITH_SOURCE:
        if not d.content:
            raise CannotSendEmptyMessage
        flags = d.flags & MessageFlags.EPHEMERAL
        await send_interaction_response(interaction, flags, d.content)
    elif data.type == T.DEFFERED_CHANNEL_MESSAGE_WITH_SOURCE:
        flags = d.flags & MessageFlags.EPHEMERAL if d is not None else 0
        flags |= MessageFlags.LOADING
        await send_interaction_response(interaction, flags, "")

    return "", 204


3) Remove control flag.
Метод замінює прапоти керування на такі кострукції, як break, continue або return.
Проведемо рефакторинг у наведеному прикладі змінна disconnected є прапором, який визначає, коли потрібно вийти з циклу, замінимо цю змінну на break.

Приклад до рефакторингу:
private void realHandle() {
    boolean disconnected = false;
    while (!disconnected) {
        try {
            BasePacket packet = BasePacket.readPacket(reader);
            
            log("got packet: " + packet + " of type " + packet.getPacketType());
            if(packet instanceof SendMessagePacket messagePacket) {
                server.clientSentMessage(this, messagePacket.text);
            } else if(packet instanceof ShutdownRequestPacket shutdownPacket) {
                server.clientSentShutdown(this, shutdownPacket.password);
            }
        } catch (IOException e) {
            logger.warning("Failed to read packet: " + e);
        } catch (EOFException e) {
            logger.warning("Client " + login + " disconnected!");
            disconnected = true;
        }
    }
    server.clientDisconnected(this);
}

Приклад після рефакторингу:
private void realHandle() {
    while (true) {
        BasePacket packet;
        try {
            packet = BasePacket.readPacket(reader);
        } catch (IOException e) {
            logger.warning("Failed to read packet: " + e);
            continue;
        } catch (EOFException e) {
            logger.warning("Client " + login + " disconnected!");
            break;
        }
        log("got packet: " + packet + " of type " + packet.getPacketType());
        if(packet instanceof SendMessagePacket messagePacket) {
            server.clientSentMessage(this, messagePacket.text);
        } else if(packet instanceof ShutdownRequestPacket shutdownPacket) {
            server.clientSentShutdown(this, shutdownPacket.password);
        }
    }
    server.clientDisconnected(this);
}


Основні переваги використання обраних методів рефакторингу: 
1. Код стає менш ієрархічним, що підвищує його читабельність і спрощує розуміння;
2. Логіка обробки коду стає більш очевидною;
3. Всі, хто працює з кодом, розуміють, що означає конкретна частина коду.
4. Менше шансів зробити помилку через складну структуру коду.

Висновки: використання обраних методів рефакторингу коду програмного забезпечення покращує читабельність коду, його структуру, спрощує підтримку, спрощує логіку, що знижує ризик помилок і спрощує перевірку.

Список використаних джерел:
1. Refactoring and design patterns: https://refactoring.guru/



Додаток А
Слайд презентації №1



Додаток Б
Слайд презентації №2



Додаток В
Слайд презентації №3



Додаток Д
Слайд презентації №4



Додаток Е
Слайд презентації №5



Додаток Ж
Слайд презентації №6



Додаток И
Слайд презентації №7



Додаток К
Слайд презентації №8



Додаток Л
Слайд презентації №9



Додаток М
Слайд презентації №10



Додаток Н
Слайд презентації №11



Додаток П
Слайд презентації №12
